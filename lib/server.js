// Generated by CoffeeScript 1.12.5

/*
 * nodejs-express-mongoose-demo
 * Copyright(c) 2013 Madhusudhan Srinivasa <madhums8@gmail.com>
 * MIT Licensed
 */

(function() {
  var _, app, compression, config, configs, debuglog, env, err, exports, express, externalConfig, fs, mongoose, p, path, pathToExternalConfig, pkg, port;

  express = require('express');

  compression = require('compression');

  fs = require('fs');

  p = require("commander");

  path = require("path");

  _ = require("underscore");

  debuglog = require("debug")("node-ticket-manager:server");

  pkg = JSON.parse(fs.readFileSync(path.join(__dirname, "../package.json")));

  p.version(pkg.version).option('-c, --config [VALUE]', 'path to config file').option('-p, --port [VALUE]', 'port to run this web service').option('-e, --environment  [VALUE]', 'application environment mode').parse(process.argv);

  env = p.environment || process.env.NODE_ENV || 'development';

  try {
    configs = require('./config/config');
  }
  catch (ex) {
    console.log('\n\n\n\n\n'
                + 'You must first configure the server by creating'
                + ' ./config/config.js. An example configuration is'
                + ' available at ./config/config.js, but for security,'
                + ' don\'t use it directly--instead, make a similar'
                + ' file with good-quality passwords.\n'
                + '(Ignore the nodemon error below).\n\n');
    process.exit(2)
  }

  config = configs[env];

  config.version = pkg.version;

  config.root = path.resolve(__dirname, "../");

  debuglog("[server] config.root:" + config.root);

  if (p.config) {
    try {
      pathToExternalConfig = path.resolve(config.root, p.config);
      debuglog("pathToExternalConfig:" + pathToExternalConfig);
      externalConfig = JSON.parse(fs.readFileSync(pathToExternalConfig));
      debuglog("externalConfig:%j", externalConfig);
      _.extend(config, externalConfig);
    } catch (error) {
      err = error;
      debuglog("ERROR [server] fail to mixin externalConfig. " + err);
    }
  }

  mongoose = require('mongoose');

  mongoose.connect(config.db);

  if (env === 'development') {
    mongoose.set('debug', true);
  }

  require("./models/ticket");

  require("./models/worker");

  app = express();

  app.use(compression());

  require('./config/express')(app, config);

  require('./config/routes')(app);

  port = p.port || process.env.PORT || 3456;

  app.listen(port);

  debuglog("Ticketman app started on port " + port);

  exports = module.exports = app;

}).call(this);
